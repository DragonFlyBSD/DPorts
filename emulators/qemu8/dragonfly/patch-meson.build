--- meson.build.orig	Mon Jun 10 17:19:05 2024
+++ meson.build	Sun Mar
@@ -54,7 +54,7 @@ genh = []
 qapi_trace_events = []
 
 bsd_oses = ['gnu/kfreebsd', 'freebsd', 'netbsd', 'openbsd', 'dragonfly', 'darwin']
-supported_oses = ['windows', 'freebsd', 'netbsd', 'openbsd', 'darwin', 'sunos', 'linux']
+supported_oses = ['windows', 'freebsd', 'netbsd', 'openbsd', 'darwin', 'sunos', 'linux', 'dragonfly']
 supported_cpus = ['ppc', 'ppc64', 's390x', 'riscv32', 'riscv64', 'x86', 'x86_64',
   'arm', 'aarch64', 'loongarch64', 'mips', 'mips64', 'sparc64']
 
@@ -75,7 +75,7 @@ have_tools = get_option('tools') \
   .allowed()
 have_ga = get_option('guest_agent') \
   .disable_auto_if(not have_system and not have_tools) \
-  .require(targetos in ['sunos', 'linux', 'windows', 'freebsd', 'netbsd', 'openbsd'],
+  .require(targetos in ['sunos', 'linux', 'windows', 'freebsd', 'netbsd', 'openbsd', 'dragonfly'],
            error_message: 'unsupported OS for QEMU guest agent') \
   .allowed()
 enable_modules = get_option('modules') \
@@ -653,7 +653,7 @@ if get_option('hvf').allowed()
     accelerators += 'CONFIG_HVF'
   endif
 endif
-if targetos == 'netbsd'
+if targetos in [ 'netbsd', 'dragonfly' ]
   nvmm = cc.find_library('nvmm', required: get_option('nvmm'))
   if nvmm.found()
     accelerators += 'CONFIG_NVMM'
@@ -1160,7 +1160,7 @@ if have_system and get_option('curses').allowed()
   msg = get_option('curses').enabled() ? 'curses library not found' : ''
   curses_compile_args = ['-DNCURSES_WIDECHAR=1']
   if curses.found()
-    if cc.links(curses_test, args: curses_compile_args, dependencies: [curses])
+    if cc.links(curses_test, args: '-DNCURSES_WIDECHAR', args: '-DNCURSES_WIDECHAR', args: curses_compile_args, dependencies: [curses])
       curses = declare_dependency(compile_args: curses_compile_args, dependencies: [curses],
                                   version: curses.version())
     else
@@ -1181,7 +1181,7 @@ if have_system and get_option('curses').allowed()
         libcurses = cc.find_library(curses_libname,
                                     required: false)
         if libcurses.found()
-          if cc.links(curses_test, args: curses_compile_args, dependencies: libcurses)
+          if cc.links(curses_test, args: '-DNCURSES_WIDECHAR', args: '-DNCURSES_WIDECHAR', args: curses_compile_args, dependencies: libcurses)
             curses = declare_dependency(compile_args: curses_compile_args,
                                         dependencies: [libcurses])
             break
