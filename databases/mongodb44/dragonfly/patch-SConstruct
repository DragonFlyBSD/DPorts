--- SConstruct.intermediate	2023-07-08 09:23:51 UTC
+++ SConstruct
@@ -1346,6 +1346,7 @@ os_macros = {
     "windows": "defined(_WIN32)",
     "solaris": "defined(__sun)",
     "freebsd": "defined(__FreeBSD__)",
+    "dragonfly": "defined(__DragonFly__)",
     "openbsd": "defined(__OpenBSD__)",
     "iOS": "defined(__APPLE__) && TARGET_OS_IOS && !TARGET_OS_SIMULATOR",
     "iOS-sim": "defined(__APPLE__) && TARGET_OS_IOS && TARGET_OS_SIMULATOR",
@@ -1813,7 +1814,7 @@ if env['_LIBDEPS'] == '$_LIBDEPS_LIBS':
     if not env.TargetOSIs('solaris', 'darwin', 'windows', 'openbsd'):
         env.Tool('thin_archive')
 
-if env.TargetOSIs('linux', 'freebsd', 'openbsd'):
+if env.TargetOSIs('linux', 'freebsd', 'openbsd', 'dragonfly'):
     # NOTE: The leading and trailing spaces here are important. Do not remove them.
     env['LINK_WHOLE_ARCHIVE_LIB_START'] = '-Wl,--whole-archive '
     env['LINK_WHOLE_ARCHIVE_LIB_END'] = ' -Wl,--no-whole-archive'
@@ -1857,6 +1858,10 @@ elif env.TargetOSIs('freebsd'):
     env.Append( LIBS=[ "kvm" ] )
     env.Append( CCFLAGS=[ "-fno-omit-frame-pointer" ] )
 
+elif env.TargetOSIs('dragonfly'):
+    env.Append( LIBS=[ "kvm" ] )
+    env.Append( CCFLAGS=[ "-fno-omit-frame-pointer" ] )
+
 elif env.TargetOSIs('darwin'):
     env.Append( LIBS=["resolv"] )
 
@@ -2165,7 +2170,7 @@ if env.TargetOSIs('posix'):
                          "-Wno-unknown-pragmas",
                          "-Winvalid-pch"] )
     # env.Append( " -Wconversion" ) TODO: this doesn't really work yet
-    if env.TargetOSIs('linux', 'darwin', 'solaris', 'freebsd'):
+    if env.TargetOSIs('linux', 'darwin', 'solaris', 'freebsd', 'dragonfly'):
         if not has_option("disable-warnings-as-errors"):
             env.Append( CCFLAGS=["-Werror"] )
 
@@ -3413,6 +3418,9 @@ def doConfigure(myenv):
         if conf.env.TargetOSIs('freebsd'):
             sslLinkDependencies = ["crypto"]
 
+        if conf.env.TargetOSIs('dragonfly'):
+            sslLinkDependencies = ["crypto"]
+
         if conf.env.TargetOSIs('windows'):
             sslLibName = "ssleay32"
             cryptoLibName = "libeay32"
@@ -3747,7 +3755,7 @@ def doConfigure(myenv):
         myenv.ConfError("Couldn't find SASL header/libraries")
 
     # requires ports devel/libexecinfo to be installed
-    if env.TargetOSIs('freebsd', 'openbsd'):
+    if env.TargetOSIs('freebsd', 'openbsd', 'dragonfly'):
         if not conf.CheckLib("execinfo"):
             myenv.ConfError("Cannot find libexecinfo, please install devel/libexecinfo.")
 
