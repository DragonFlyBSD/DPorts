USE_CLANG_FALLBACK=	13

.if !defined(GN_ONLY)
# XXX - This is a hack to force llvm to use libc++ C++ includes instead of base's gcc
CXXFLAGS+=	-stdlib=libc++ -cxx-isystem ${LOCALBASE}/llvm${LLVM_DEFAULT}/libcxx/include/c++/v1 -I${LOCALBASE}/include
LDFLAGS=	-L /usr/lib -L${LOCALBASE}/llvm${LLVM_DEFAULT}/libcxx/lib/c++ -L /lib

# Since FreeBSD has libc++ in base we need to rely on DPorts' libcxx
LIB_DIRS+=	${PREFIX}/llvm${LLVM_DEFAULT}/libcxx/lib
LIB_DEPENDS+=  	libc++.so.1:devel/libcxx13

# we don't support libcuse so no audio/virtual_oss
RUN_DEPENDS:=	${RUN_DEPENDS:Nvirtual_oss*}

# chromium-legacy installs files in the same path as this port
CONFLICTS_INSTALL=      chromium-legacy

# FreeBSD has kerberos in base but we don't
KERBEROS_LIB_DEPENDS+=	libkrb5.so:security/krb5
.endif

# XXX - Jumbo builds are faster but some work needs to be done for it to work in dfly.
#GN_ARGS:= ${GN_ARGS:Nuse_jumbo_build=true}

.if ${DFLYVERSION} < 500709
EXTRA_PATCHES += ${DFLY_PATCHDIR}/extra-patch_release_5_6
.endif

dfly-patch:
	# Sandbox stuff
	@${MKDIR} ${WRKSRC}/sandbox/policy/dragonfly
	@${CP} ${WRKSRC}/sandbox/policy/freebsd/sandbox_freebsd.h ${WRKSRC}/sandbox/policy/dragonfly/sandbox_dragonfly.h
	@${CP} ${WRKSRC}/sandbox/policy/freebsd/sandbox_freebsd.cc ${WRKSRC}/sandbox/policy/dragonfly/sandbox_dragonfly.cc
	${REINPLACE_CMD} -e "s|FreeBSD|DragonFly|g" \
		-e "s|freebsd\/sandbox_freebsd.h|dragonfly\/sandbox_dragonfly.h|g" \
		${WRKSRC}/sandbox/policy/dragonfly/sandbox_dragonfly.h \
		${WRKSRC}/sandbox/policy/dragonfly/sandbox_dragonfly.cc \

	# Setup nodejs dependency
	@${MKDIR} ${WRKSRC}/third_party/node/dragonfly/node-dragonfly/bin
	${LN} -sf ${LOCALBASE}/bin/node ${WRKSRC}/third_party/node/dragonfly/node-dragonfly/bin/node

	# Chromium uses an unreleased version of FFmpeg, so configure it
	${CP} -R \
                ${WRKSRC}/third_party/ffmpeg/chromium/config/Chrome/linux/ \
                ${WRKSRC}/third_party/ffmpeg/chromium/config/Chrome/dragonfly

	# Setup buildtools/freebsd
	@${MKDIR} ${WRKSRC}/buildtools/dragonfly
	${LN} -sf ${WRKSRC}/buildtools/linux64/clang-format ${WRKSRC}/buildtools/dragonfly
	${LN} -sf ${WRKSRC}/out/${BUILDTYPE}/gn ${WRKSRC}/buildtools/dragonfly

	# XXX The correct solution is to pass variables to gn
	# Use the current LLVM version by replacing the hardcoded one
	${REINPLACE_CMD} -e "s|clang60|clang${LLVM_DEFAULT}|g" \
		-e "s|clang\+\+60|clang++${LLVM_DEFAULT}|g" \
		-e "s|llvm-ar|llvm-ar${LLVM_DEFAULT}|g" \
		-e "s|llvm-nm|llvm-nm${LLVM_DEFAULT}|g" \
		${WRKSRC}/build/toolchain/gcc_toolchain.gni
